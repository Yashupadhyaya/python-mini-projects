# ********RoostGPT********
"""
Test generated by RoostGPT for test python-testing-unit using AI Type  and AI Model 

ROOST_METHOD_HASH=img_to_ascii_653d35675c
ROOST_METHOD_SIG_HASH=img_to_ascii_8789e6d66f


Scenario 1: Testing with a valid image
Details:
  TestName: test_img_to_ascii_valid_image
  Description: This test is intended to verify if the function works correctly when provided with a valid image.
Execution:
  Arrange: Initialize a valid image with known dimensions.
  Act: Call the function img_to_ascii with the initialized image.
  Assert: Check if the returned image has the expected dimensions and values.
Validation:
  This test is important to ensure that the function behaves correctly under normal circumstances. The expected result is that the function returns an image with the correct dimensions and values, which is critical to the function's specifications and business requirements.

Scenario 2: Testing with an empty image
Details:
  TestName: test_img_to_ascii_empty_image
  Description: This test is intended to verify that the function behaves correctly when provided with an empty image.
Execution:
  Arrange: Initialize an empty image.
  Act: Call the function img_to_ascii with the empty image.
  Assert: Check if the returned image is also empty.
Validation:
  This test is crucial to ensure that the function can handle edge cases correctly. The expected result is that the function returns an empty image, as it should not add any additional information to an empty image.

Scenario 3: Testing with a large image
Details:
  TestName: test_img_to_ascii_large_image
  Description: This test is intended to verify that the function can handle larger images without crashing or taking too long.
Execution:
  Arrange: Initialize a large image.
  Act: Call the function img_to_ascii with the large image.
  Assert: Check if the function completes within a reasonable amount of time and returns an image with the expected dimensions.
Validation:
  This test is important to ensure that the function can handle a variety of image sizes. The expected result is that the function completes within a reasonable amount of time, which is important for the function's performance and usability.

Scenario 4: Testing with different threshold values
Details:
  TestName: test_img_to_ascii_different_thresholds
  Description: This test is intended to verify that the function behaves correctly when the threshold values are varied.
Execution:
  Arrange: Initialize a valid image and different lists of threshold values.
  Act: Call the function img_to_ascii with the initialized image and each list of threshold values.
  Assert: Check if the returned image has the expected values based on the applied thresholds.
Validation:
  This test is crucial to ensure that the function behaves correctly when different threshold values are applied. The expected result is that the function returns an image with values corresponding to the applied thresholds, which is fundamental to the function's specifications and business requirements.
"""

# ********RoostGPT********
import cv2
import numpy as np
import sys
import pytest
from Ascii_art.make_art import img_to_ascii

class Test_MakeArtImgToAscii:

    @pytest.mark.regression
    def test_img_to_ascii_valid_image(self):
        # Arrange
        valid_image = np.random.randint(0, 255, (50, 50), dtype='uint8')
        expected_shape = (valid_image.shape[0] // 40, valid_image.shape[1] // 20)

        # Act
        result = img_to_ascii(valid_image)

        # Assert
        assert result.shape == expected_shape
        assert np.all(result >= 0)
        assert np.all(result <= 5)

    @pytest.mark.regression
    def test_img_to_ascii_empty_image(self):
        # Arrange
        empty_image = np.empty((0, 0), dtype='uint8')

        # Act
        result = img_to_ascii(empty_image)

        # Assert
        assert result.size == 0

    @pytest.mark.performance
    def test_img_to_ascii_large_image(self):
        # Arrange
        large_image = np.random.randint(0, 255, (5000, 5000), dtype='uint8')
        expected_shape = (large_image.shape[0] // 40, large_image.shape[1] // 20)

        # Act
        result = img_to_ascii(large_image)

        # Assert
        assert result.shape == expected_shape

    @pytest.mark.regression
    def test_img_to_ascii_different_thresholds(self):
        # Arrange
        valid_image = np.random.randint(0, 255, (50, 50), dtype='uint8')
        original_threshold_list = [0, 50, 100, 150, 200]
        new_threshold_list = [0, 60, 120, 180, 240]

        # Act
        result_original_thresholds = img_to_ascii(valid_image)
        sys.modules['Ascii_art.make_art'].threshold_list = new_threshold_list
        result_new_thresholds = img_to_ascii(valid_image)

        # Assert
        assert np.all(result_original_thresholds != result_new_thresholds)
