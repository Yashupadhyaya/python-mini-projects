# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-testing-2 using AI Type  and AI Model 

ROOST_METHOD_HASH=move_ball_fdd06019e1
ROOST_METHOD_SIG_HASH=move_ball_783a83baa3


Scenario 1: Validating the velocity change and collision on the X-axis
Details:
  TestName: test_velocity_and_collision_x_axis
  Description: This test verifies that the velocity of the ball in X direction changes correctly and that the collision with the wall is handled properly.
Execution:
  Arrange: Initialize a ball object.
  Act: Invoke the move_ball method and manually change the X coordinate to simulate a collision.
  Assert: Check the change in velocity and position of the ball.
Validation:
  This test is important as it ensures the ball bounces correctly off the walls in the X direction and the velocity is updated correctly.

Scenario 2: Validating the velocity change and collision on the Y-axis
Details:
  TestName: test_velocity_and_collision_y_axis
  Description: This test verifies that the velocity of the ball in Y direction changes correctly and that the collision with the wall is handled properly.
Execution:
  Arrange: Initialize a ball object.
  Act: Invoke the move_ball method and manually change the Y coordinate to simulate a collision.
  Assert: Check the change in velocity and position of the ball.
Validation:
  This is crucial to ensure the ball bounces correctly off the walls in the Y direction and the velocity is updated correctly.

Scenario 3: Validating the downward acceleration effect on the Y component of velocity
Details:
  TestName: test_downward_acceleration_effect
  Description: This test verifies that the Y component of velocity is correctly updated due to the effect of downward acceleration.
Execution:
  Arrange: Initialize a ball object.
  Act: Invoke the move_ball method multiple times.
  Assert: Check that the Y velocity is increasing due to the downward acceleration.
Validation:
  This test is important to validate the physics of the game, ensuring the ball's motion adheres to the laws of gravity.
"""

# ********RoostGPT********
import pytest
import pygame
import time
import random
from Bouncing_ball_simulator.ball_bounce import ball.move_ball

class Test_BallMoveBall:

    @pytest.mark.regression
    def test_velocity_and_collision_x_axis(self):
        ball_obj = ball()
        initial_velocityX = ball_obj.velocityX
        ball_obj.move_ball()
        ball_obj.X = -1  # Simulating collision
        ball_obj.move_ball()
        # Assert velocity change and position reset after collision
        assert ball_obj.velocityX == -initial_velocityX
        assert ball_obj.X == 0

    @pytest.mark.regression
    def test_velocity_and_collision_y_axis(self):
        ball_obj = ball()
        initial_velocityY = ball_obj.velocityY
        ball_obj.move_ball()
        ball_obj.Y = 569  # Simulating collision
        ball_obj.move_ball()
        # Assert velocity change and position reset after collision
        assert ball_obj.velocityY == -initial_velocityY
        assert ball_obj.Y == 568

    @pytest.mark.regression
    def test_downward_acceleration_effect(self):
        ball_obj = ball()
        initial_velocityY = ball_obj.velocityY
        for _ in range(10):
            ball_obj.move_ball()
        # Assert Y velocity is increasing due to downward acceleration
        assert ball_obj.velocityY > initial_velocityY
