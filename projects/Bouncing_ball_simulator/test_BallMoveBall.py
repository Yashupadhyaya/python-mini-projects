# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-testing-2 using AI Type  and AI Model 

ROOST_METHOD_HASH=move_ball_fdd06019e1
ROOST_METHOD_SIG_HASH=move_ball_783a83baa3


Scenario 1: Validating the velocity change and position after moving the ball
Details:
  TestName: test_move_ball_velocity_and_position
  Description: This test verifies that the velocity of the ball and its position changes correctly after invoking the move_ball function.
Execution:
  Arrange: Initialize an object of the class, record the initial velocities and positions.
  Act: Invoke the move_ball function on the object.
  Assert: Check if the velocities and positions have changed as expected.
Validation:
  This test is important to ensure that the ball's movement is being calculated correctly, which is fundamental to the game's mechanics.

Scenario 2: Testing the ball's collision with the walls
Details:
  TestName: test_move_ball_wall_collision
  Description: This test verifies that the ball's velocity changes direction when it hits a wall.
Execution:
  Arrange: Initialize an object of the class, set the ball's position close to a wall and its velocity towards the wall.
  Act: Invoke the move_ball function on the object.
  Assert: Check if the velocity changes direction after the function call.
Validation:
  This test ensures that the ball bounces off the walls correctly, which is a vital aspect of the game's mechanics.

Scenario 3: Testing the ball's position after hitting the floor
Details:
  TestName: test_move_ball_floor_hit
  Description: This test verifies that the ball's Y position is set to 0 after hitting the floor.
Execution:
  Arrange: Initialize an object of the class, set the ball's Y position close to 568 and its Y velocity towards the floor.
  Act: Invoke the move_ball function on the object.
  Assert: Check if the ball's Y position is set to 0 after the function call.
Validation:
  This test ensures that the ball doesn't go below the floor, which is a crucial requirement for the game's mechanics.
"""

# ********RoostGPT********
import pytest
import pygame
import time
import random
from Bouncing_ball_simulator.ball_bounce import ball

class Test_BallMoveBall:

    @pytest.mark.regression
    def test_move_ball_velocity_and_position(self):
        # Arrange
        test_ball = ball()
        initial_velocityX = test_ball.velocityX
        initial_velocityY = test_ball.velocityY
        initial_X = test_ball.X
        initial_Y = test_ball.Y
        
        # Act
        test_ball.move_ball()
        
        # Assert
        assert test_ball.velocityX != initial_velocityX
        assert test_ball.velocityY != initial_velocityY
        assert test_ball.X != initial_X
        assert test_ball.Y != initial_Y

    @pytest.mark.regression
    def test_move_ball_wall_collision(self):
        # Arrange
        test_ball = ball()
        test_ball.X = 765
        test_ball.velocityX = 5
        
        # Act
        test_ball.move_ball()
        
        # Assert
        assert test_ball.velocityX == -5

    @pytest.mark.regression
    def test_move_ball_floor_hit(self):
        # Arrange
        test_ball = ball()
        test_ball.Y = 565
        test_ball.velocityY = 5
        
        # Act
        test_ball.move_ball()
        
        # Assert
        assert test_ball.Y == 568
        assert test_ball.velocityY == -5
