# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-testing-2 using AI Type  and AI Model 

ROOST_METHOD_HASH=render_ball_f4e168e367
ROOST_METHOD_SIG_HASH=render_ball_85a8742841


Scenario 1: Test when the blit function is correctly executed
Details:
  TestName: test_render_ball
  Description: This test is intended to verify if the blit function is correctly executed using the provided ball.ball_image and the object's X and Y values.
Execution:
  Arrange: Initialize a ball object and mock the screen.blit function.
  Act: Invoke the render_ball function on the ball object.
  Assert: Check if the screen.blit function was called with the correct parameters.
Validation:
  The test is important to ensure that the render_ball function is correctly rendering the ball image at the object's X and Y coordinates. It validates that the function is functioning as expected.

Scenario 2: Test when the ball's X and Y values are updated
Details:
  TestName: test_update_ball_coordinates
  Description: This test is intended to verify if the ball's X and Y values are updated correctly after the render_ball function is invoked.
Execution:
  Arrange: Initialize a ball object and note down the initial X and Y values. Mock the screen.blit function.
  Act: Invoke the render_ball function on the ball object.
  Assert: Check if the ball's X and Y values are updated correctly.
Validation:
  The test is important to ensure that the render_ball function is correctly updating the ball's X and Y values. It validates that the function is functioning as expected and the ball is moving as intended.
"""

# ********RoostGPT********
import pytest
import pygame
import time
import random
from unittest.mock import Mock, patch
from Bouncing_ball_simulator.ball_bounce import ball

class Test_BallRenderBall:
    @pytest.mark.regression
    def test_render_ball(self):
        # Arrange
        test_ball = ball()
        initial_X = test_ball.X
        initial_Y = test_ball.Y
        mock_screen = Mock()
        test_ball.screen = mock_screen

        # Act
        test_ball.render_ball()

        # Assert
        mock_screen.blit.assert_called_once_with(test_ball.ball_image, (initial_X, initial_Y))

    @pytest.mark.regression
    def test_update_ball_coordinates(self):
        # Arrange
        test_ball = ball()
        initial_X = test_ball.X
        initial_Y = test_ball.Y
        mock_screen = Mock()
        test_ball.screen = mock_screen

        # Act
        test_ball.render_ball()

        # Assert
        assert test_ball.X != initial_X
        assert test_ball.Y != initial_Y
