# ********RoostGPT********
"""
Test generated by RoostGPT for test test-python using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=welcome_bill_fc637b53e0
ROOST_METHOD_SIG_HASH=welcome_bill_8a5d8ffb72


Scenario 1: Verify the welcome message in the bill
Details:
  TestName: test_welcome_message
  Description: The test is intended to verify that the welcome message is correctly displayed in the bill.
Execution:
  Arrange: Initialize the objects and set the customer name and phone number.
  Act: Invoke the welcome_bill function.
  Assert: Check if the welcome message, bill number, customer name, and phone number are correctly displayed.
Validation:
  This test is important to ensure that the welcome message is correctly displayed in the bill. The expected result is connected to the function's specifications and business requirements as it ensures the correctness of the bill's welcome message.

Scenario 2: Check if the bill number is unique for each new bill
Details:
  TestName: test_unique_bill_number
  Description: The test is intended to verify that the bill number is unique for each new bill.
Execution:
  Arrange: Initialize the objects and set the customer name and phone number.
  Act: Invoke the welcome_bill function twice.
  Assert: Check if the bill numbers of the two bills are different.
Validation:
  This test is important to ensure that each bill has a unique bill number. The expected result is connected to the function's specifications and business requirements as it ensures the uniqueness of the bill number.

Scenario 3: Check if the bill includes the correct products, quantities, and prices
Details:
  TestName: test_correct_products_quantities_prices
  Description: The test is intended to verify that the bill includes the correct products, quantities, and prices.
Execution:
  Arrange: Initialize the objects and set the customer name, phone number, and purchase details.
  Act: Invoke the welcome_bill function.
  Assert: Check if the bill includes the correct products, quantities, and prices.
Validation:
  This test is important to ensure that the bill includes the correct information about the customer's purchases. The expected result is connected to the function's specifications and business requirements as it ensures the correctness of the bill's content.

Scenario 4: Check if the bill is empty when no purchases have been made
Details:
  TestName: test_empty_bill
  Description: The test is intended to verify that the bill is empty when no purchases have been made.
Execution:
  Arrange: Initialize the objects and set the customer name and phone number without making any purchases.
  Act: Invoke the welcome_bill function.
  Assert: Check if the bill only includes the welcome message, bill number, customer name, and phone number but no product information.
Validation:
  This test is important to ensure that the bill is empty when no purchases have been made. The expected result is connected to the function's specifications and business requirements as it ensures the correctness of the bill's content when no purchases have been made.
"""

# ********RoostGPT********
import pytest
from Billing_system.biling_system import Bill_App
from tkinter import *

@pytest.mark.parametrize("customer_name, phone_number, expected_welcome_message", [
    ("John Doe", "1234567890", "\tWelcome Webcode Retail\n Bill Number:1234\nCustomer Name:John Doe\nPhone Number1234567890\n================================\nProducts\t\tQTY\t\tPrice"),
    ("Jane Doe", "0987654321", "\tWelcome Webcode Retail\n Bill Number:1234\nCustomer Name:Jane Doe\nPhone Number0987654321\n================================\nProducts\t\tQTY\t\tPrice")
])
def test_welcome_message(customer_name, phone_number, expected_welcome_message):
    root = Tk()
    bill_app = Bill_App(root)
    bill_app.c_name.set(customer_name)
    bill_app.c_phone.set(phone_number)
    bill_app.welcome_bill()
    assert bill_app.txtarea.get("1.0", "end-1c") == expected_welcome_message
    root.destroy()

def test_unique_bill_number():
    root = Tk()
    bill_app = Bill_App(root)
    bill_app.welcome_bill()
    bill_number1 = bill_app.bill_no.get()
    bill_app.welcome_bill()
    bill_number2 = bill_app.bill_no.get()
    assert bill_number1 != bill_number2
    root.destroy()

@pytest.mark.parametrize("customer_name, phone_number, purchases, expected_output", [
    ("John Doe", "1234567890", [("Product1", 2, 20), ("Product2", 3, 30)], "\tWelcome Webcode Retail\n Bill Number:1234\nCustomer Name:John Doe\nPhone Number1234567890\n================================\nProducts\t\tQTY\t\tPrice\nProduct1\t\t2\t\t20\nProduct2\t\t3\t\t30"),
    ("Jane Doe", "0987654321", [("Product3", 1, 10)], "\tWelcome Webcode Retail\n Bill Number:1234\nCustomer Name:Jane Doe\nPhone Number0987654321\n================================\nProducts\t\tQTY\t\tPrice\nProduct3\t\t1\t\t10")
])
def test_correct_products_quantities_prices(customer_name, phone_number, purchases, expected_output):
    root = Tk()
    bill_app = Bill_App(root)
    bill_app.c_name.set(customer_name)
    bill_app.c_phone.set(phone_number)
    for product, quantity, price in purchases:
        bill_app.txtarea.insert(END, f"\n{product}\t\t{quantity}\t\t{price}")
    bill_app.welcome_bill()
    assert bill_app.txtarea.get("1.0", "end-1c") == expected_output
    root.destroy()

def test_empty_bill():
    root = Tk()
    bill_app = Bill_App(root)
    bill_app.c_name.set("John Doe")
    bill_app.c_phone.set("1234567890")
    bill_app.welcome_bill()
    assert bill_app.txtarea.get("1.0", "end-1c") == "\tWelcome Webcode Retail\n Bill Number:1234\nCustomer Name:John Doe\nPhone Number1234567890\n================================\nProducts\t\tQTY\t\tPrice"
    root.destroy()
