# ********RoostGPT********
"""
Test generated by RoostGPT for test test-python using AI Type  and AI Model 

ROOST_METHOD_HASH=clear_data_039b9b5ff8
ROOST_METHOD_SIG_HASH=clear_data_75709990c7


```
Scenario 1: Confirm successful reset of product quantities to zero
Details:
  TestName: test_should_reset_product_quantities
  Description: This test verifies whether all product quantity variables are reset to zero after executing clear_data.
Execution:
  Arrange: Instantiate the class and set some product quantities to non-zero values.
  Act: Invoke the clear_data method.
  Assert: Check if the values of all product quantities are set back to 0.
Validation:
  The importance lies in ensuring that the clear operation resets all quantities as anticipated, preparing the system for a new transaction without residual data from previous ones.

Scenario 2: Ensure tax and price text values are cleared
Details:
  TestName: test_should_clear_tax_and_price_fields
  Description: Check whether the tax and price related StringVars are cleared (set to empty strings).
Execution:
  Arrange: Initialize the class, setting relevant tax and price data to non-default values.
  Act: Call the clear_data method.
  Assert: Verify if the related fields are set to empty strings post-execution.
Validation:
  Verifying this behavior is crucial for ensuring the interface reflects a true reset, preventing confusion with residual financial information.

Scenario 3: Confirm customer details are wiped
Details:
  TestName: test_should_remove_customer_information
  Description: Ensure customer information fields are reset.
Execution:
  Arrange: Initialize the object and input data into customer information fields.
  Act: Execute the clear_data method.
  Assert: Customer name, phone, and bill search fields should be checked to ensure they are empty.
Validation:
  Testing ensures that confidentiality is maintained by clearing sensitive customer information after their transaction is closed or reset.

Scenario 4: Check regeneration of the bill number
Details:
  TestName: test_should_regenerate_bill_number
  Description: This test ensures a new bill number is generated after clearing data.
Execution:
  Arrange: Initialize the class and note the initial bill number.
  Act: Execute clear_data and compare the new bill number to the original.
  Assert: The bill number should be different from the original.
Validation:
  Ensuring a new bill number is generated validates the implementation of randomness and uniqueness in each transaction session, crucial for record-keeping and audit purposes.

Scenario 5: Verify if the welcome_bill method is called
Details:
  TestName: test_should_call_welcome_bill
  Description: Checks that the welcome_bill method is triggered after clearing data, which is expected to reset the bill area text.
Execution:
  Arrange: Initialize the class and perhaps mock the welcome_bill method to track its invocation.
  Act: Invoke clear_data.
  Assert: Confirm that welcome_bill was called.
Validation:
  This test assures that after a reset, the billing area is properly initialized with welcome text and current session details, improving user experience and clarity on the application status.
```
"""

# ********RoostGPT********
import pytest
import random
from tkinter import *
from tkinter import messagebox
from unittest.mock import patch, MagicMock

# TODO: Change this import according to the actual package and class name
from Billing_system.biling_system import Bill_App

class Test_BillAppClearData:
    @pytest.mark.smoke
    def test_should_reset_product_quantities(self):
        # Arrange
        root = Tk()
        app = Bill_App(root)
        app.sanitizer.set(10)
        app.mask.set(20)
        app.hand_gloves.set(5)
        app.dettol.set(3)
        app.newsprin.set(15)
        app.thermal_gun.set(7)
        app.rice.set(12)
        app.food_oil.set(30)
        app.wheat.set(4)
        app.daal.set(10)
        app.flour.set(20)
        app.maggi.set(3)
        app.sprite.set(10)
        app.limka.set(20)
        app.mazza.set(5)
        app.coke.set(100)
        app.fanta.set(50)
        app.mountain_duo.set(25)

        # Act
        with patch.object(messagebox, 'askyesno', return_value=True):
            app.clear_data()

        # Assert
        assert app.sanitizer.get() == 0
        assert app.mask.get() == 0
        assert app.hand_gloves.get() == 0
        assert app.dettol.get() == 0
        assert app.newsprin.get() == 0
        assert app.thermal_gun.get() == 0
        assert app.rice.get() == 0
        assert app.food_oil.get() == 0
        assert app.wheat.get() == 0
        assert app.daal.get() == 0
        assert app.flour.get() == 0
        assert app.maggi.get() == 0
        assert app.sprite.get() == 0
        assert app.limka.get() == 0
        assert app.mazza.get() == 0
        assert app.coke.get() == 0
        assert app.fanta.get() == 0
        assert app.mountain_duo.get() == 0

    @pytest.mark.regression
    def test_should_clear_tax_and_price_fields(self):
        # Arrange
        root = Tk()
        app = Bill_App(root)
        app.medical_price.set("100.00")
        app.grocery_price.set("200.00")
        app.cold_drinks_price.set("50.00")
        app.medical_tax.set("5.00")
        app.grocery_tax.set("10.00")
        app.cold_drinks_tax.set("2.50")

        # Act
        with patch.object(messagebox, 'askyesno', return_value=True):
            app.clear_data()

        # Assert
        assert app.medical_price.get() == ""
        assert app.grocery_price.get() == ""
        assert app.cold_drinks_price.get() == ""
        assert app.medical_tax.get() == ""
        assert app.grocery_tax.get() == ""
        assert app.cold_drinks_tax.get() == ""

    @pytest.mark.security
    def test_should_remove_customer_information(self):
        # Arrange
        root = Tk()
        app = Bill_App(root)
        app.c_name.set("John Doe")
        app.c_phone.set("9995551234")
        app.search_bill.set("1010")

        # Act
        with patch.object(messagebox, 'askyesno', return_value=True):
            app.clear_data()

        # Assert
        assert app.c_name.get() == ""
        assert app.c_phone.get() == ""
        assert app.search_bill.get() == ""

    @pytest.mark.positive
    def test_should_regenerate_bill_number(self):
        # Arrange
        root = Tk()
        app = Bill_App(root)
        original_bill_number = app.bill_no.get()

        # Act
        with patch.object(messagebox, 'askyesno', return_value=True):
            app.clear_data()
            new_bill_number = app.bill_no.get()

        # Assert
        assert original_bill_number != new_bill_number

    @pytest.mark.regression
    def test_should_call_welcome_bill(self):
        # Arrange
        root = Tk()
        app = Bill_App(root)
        
        # Act
        with patch.object(messagebox, 'askyesno', return_value=True), patch.object(app, 'welcome_bill') as mock_welcome_bill:
            app.clear_data()
        
        # Assert
        mock_welcome_bill.assert_called_once()

