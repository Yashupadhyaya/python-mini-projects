# ********RoostGPT********
"""
Test generated by RoostGPT for test test-python using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=clear_data_039b9b5ff8
ROOST_METHOD_SIG_HASH=clear_data_75709990c7


```
Scenario 1: Test the clear_data method when user selects 'Yes' in the messagebox
Details:
  TestName: test_clear_data_yes
  Description: This test is intended to verify if all the data in the variables is cleared when the user chooses 'Yes' in the messagebox.
Execution:
  Arrange: Initialize the class object and set values for all variables.
  Act: Invoke the clear_data method and simulate a 'Yes' click on the messagebox.
  Assert: Check if all variables have been reset to their initial state.
Validation:
  The test is essential to ensure that the clear_data function works as expected and clears all data when the user chooses 'Yes' in the messagebox. The expected outcome aligns with the function's specifications and business requirements.

Scenario 2: Test the clear_data method when user selects 'No' in the messagebox
Details:
  TestName: test_clear_data_no
  Description: This test is intended to verify if all the data in the variables remains the same when the user chooses 'No' in the messagebox.
Execution:
  Arrange: Initialize the class object and set values for all variables.
  Act: Invoke the clear_data method and simulate a 'No' click on the messagebox.
  Assert: Check if all variables retain their values and are not reset to their initial state.
Validation:
  The test is essential to ensure that the clear_data function works as expected and does not clear any data when the user chooses 'No' in the messagebox. The expected outcome aligns with the function's specifications and business requirements.
  
Scenario 3: Test the clear_data method when there is no data to clear
Details:
  TestName: test_clear_data_no_data
  Description: This test is intended to verify if the clear_data method works as expected when there is no data to clear.
Execution:
  Arrange: Initialize the class object without setting values for all variables.
  Act: Invoke the clear_data method.
  Assert: Check if the method runs without any errors and the variables remain in their initial state.
Validation:
  The test is essential to ensure that the clear_data function can handle situations where there is no data to clear without throwing any errors. The expected outcome aligns with the function's specifications and business requirements.
```
"""

# ********RoostGPT********
import pytest
from tkinter import *
import random
import os
from tkinter import messagebox
from unittest.mock import patch
from Billing_system.biling_system import Bill_App

class Test_BillAppClearData:
    @pytest.mark.parametrize("messagebox_response, expected",
                             [(True, 0), (False, 1)])
    def test_clear_data_yes(self, mocker, messagebox_response, expected):
        with patch('tkinter.messagebox.askyesno', return_value=messagebox_response):
            root = Tk()
            bill_app = Bill_App(root)
            bill_app.sanitizer.set(1)
            bill_app.clear_data()
            assert bill_app.sanitizer.get() == expected

    @pytest.mark.parametrize("messagebox_response, expected",
                             [(True, 0), (False, 1)])
    def test_clear_data_no(self, mocker, messagebox_response, expected):
        with patch('tkinter.messagebox.askyesno', return_value=messagebox_response):
            root = Tk()
            bill_app = Bill_App(root)
            bill_app.sanitizer.set(1)
            bill_app.clear_data()
            assert bill_app.sanitizer.get() == expected

    def test_clear_data_no_data(self, mocker):
        with patch('tkinter.messagebox.askyesno', return_value=True):
            root = Tk()
            bill_app = Bill_App(root)
            bill_app.clear_data()
            assert bill_app.sanitizer.get() == 0
