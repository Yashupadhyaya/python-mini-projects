# ********RoostGPT********
"""
Test generated by RoostGPT for test test-python using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=exit_app_ed9c77b22d
ROOST_METHOD_SIG_HASH=exit_app_a10beac2f8


Scenario 1: Exit Application Confirmation
Details:
  TestName: test_exit_app_confirmation
  Description: This test verifies that the exit_app function correctly prompts for user confirmation before closing the application.
Execution:
  Arrange: Initialize a root object and instantiate the class with this object.
  Act: Invoke the exit_app function and simulate a user selection of 'No' in the confirmation dialog.
  Assert: Check that the root object is still in existence, indicating the application has not been closed.
Validation:
  The exit_app function is designed to prevent accidental closure of the application by requiring user confirmation. This test ensures that this safeguard is functioning correctly.

Scenario 2: Exit Application Execution
Details:
  TestName: test_exit_app_execution
  Description: This test validates that the exit_app function closes the application when the user confirms their intention to exit.
Execution:
  Arrange: Initialize a root object and instantiate the class with this object.
  Act: Invoke the exit_app function and simulate a user selection of 'Yes' in the confirmation dialog.
  Assert: Check that the root object no longer exists, indicating the application has been closed.
Validation:
  The exit_app function should close the application when the user confirms their intention to do so. This test ensures the function is correctly executing this task. 

Scenario 3: Exit Application Without Confirmation
Details:
  TestName: test_exit_app_without_confirmation
  Description: This test checks the exit_app function's behavior when the confirmation dialog is dismissed without a selection being made.
Execution:
  Arrange: Initialize a root object and instantiate the class with this object.
  Act: Invoke the exit_app function and simulate the dismissal of the confirmation dialog without a selection being made.
  Assert: Check that the root object is still in existence, indicating the application has not been closed.
Validation:
  If a user dismisses the confirmation dialog without making a selection, the exit_app function should interpret this as a decision not to exit the application. This test ensures the function is correctly handling this scenario.
"""

# ********RoostGPT********
import pytest
from unittest import mock
from tkinter import Tk
from Billing_system.biling_system import Bill_App

class Test_BillAppExitApp:
    # Test Scenario 1: Exit Application Confirmation
    @pytest.mark.regression
    def test_exit_app_confirmation(self):
        root = Tk()
        app = Bill_App(root)
        with mock.patch('tkinter.messagebox.askyesno', return_value=0):
            app.exit_app()
        assert root.winfo_exists() == 1

    # Test Scenario 2: Exit Application Execution
    @pytest.mark.regression
    def test_exit_app_execution(self):
        root = Tk()
        app = Bill_App(root)
        with mock.patch('tkinter.messagebox.askyesno', return_value=1):
            app.exit_app()
        assert root.winfo_exists() == 0

    # Test Scenario 3: Exit Application Without Confirmation
    @pytest.mark.regression
    def test_exit_app_without_confirmation(self):
        root = Tk()
        app = Bill_App(root)
        with mock.patch('tkinter.messagebox.askyesno', side_effect=Exception('Dismissed')):
            with pytest.raises(Exception) as e_info:
                app.exit_app()
            assert str(e_info.value) == 'Dismissed'
            assert root.winfo_exists() == 1
