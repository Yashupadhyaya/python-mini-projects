# ********RoostGPT********
"""
Test generated by RoostGPT for test test-python using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=total_ee3e9fb67f
ROOST_METHOD_SIG_HASH=total_11f4f7312f


Scenario 1: Test total medical price calculation
Details:
  TestName: test_total_medical_price_calculation
  Description: This test verifies that the function correctly calculates the total medical price based on the prices and quantities of medical products.
Execution:
  Arrange: Initialize the quantities for each medical product.
  Act: Invoke the total function.
  Assert: Check that the total medical price matches the expected total.
Validation:
  It is important to ensure that the function calculates the total medical price correctly as it directly affects the total bill.

Scenario 2: Test total grocery price calculation
Details:
  TestName: test_total_grocery_price_calculation
  Description: This test verifies that the function correctly calculates the total grocery price based on the prices and quantities of grocery products.
Execution:
  Arrange: Initialize the quantities for each grocery product.
  Act: Invoke the total function.
  Assert: Check that the total grocery price matches the expected total.
Validation:
  Ensuring the function calculates the total grocery price correctly is crucial as it directly impacts the total bill.

Scenario 3: Test total cold drinks price calculation
Details:
  TestName: test_total_cold_drinks_price_calculation
  Description: This test verifies that the function correctly calculates the total cold drinks price based on the prices and quantities of cold drinks.
Execution:
  Arrange: Initialize the quantities for each cold drink.
  Act: Invoke the total function.
  Assert: Check that the total cold drinks price matches the expected total.
Validation:
  It is vital to ensure that the function calculates the total cold drinks price correctly as it directly affects the total bill.

Scenario 4: Test total bill calculation
Details:
  TestName: test_total_bill_calculation
  Description: This test verifies that the function correctly calculates the total bill based on the total prices of all categories and their respective taxes.
Execution:
  Arrange: Initialize the quantities for each product.
  Act: Invoke the total function.
  Assert: Check that the total bill matches the expected total.
Validation:
  Ensuring the function calculates the total bill correctly is crucial as it is the final amount the customer has to pay.

Scenario 5: Test tax calculation
Details:
  TestName: test_tax_calculation
  Description: This test verifies that the function correctly calculates the tax based on the total price of each category.
Execution:
  Arrange: Initialize the quantities for each product.
  Act: Invoke the total function.
  Assert: Check that the tax for each category matches the expected tax.
Validation:
  It is vital to ensure that the function calculates the tax correctly as it directly affects the total bill. 

Scenario 6: Test zero quantity input
Details:
  TestName: test_zero_quantity_input
  Description: This test verifies that the function correctly handles a case where the quantity of all products is zero.
Execution:
  Arrange: Initialize the quantities for all products to zero.
  Act: Invoke the total function.
  Assert: Check that the total price and tax for each category and the total bill are all zero.
Validation:
  It is important to ensure that the function can handle a case where no products are purchased.
"""

# ********RoostGPT********
import pytest
from Billing_system.biling_system import Bill_App

class Test_BillAppTotal:

    @pytest.mark.regression
    def test_total_medical_price_calculation(self):
        bill_app = Bill_App()
        bill_app.sanitizer.set(2)
        bill_app.mask.set(3)
        bill_app.hand_gloves.set(4)
        bill_app.dettol.set(5)
        bill_app.newsprin.set(6)
        bill_app.thermal_gun.set(7)
        bill_app.total()
        assert bill_app.total_medical_price == 2*2 + 3*5 + 4*12 + 5*30 + 6*5 + 7*15

    @pytest.mark.regression
    def test_total_grocery_price_calculation(self):
        bill_app = Bill_App()
        bill_app.rice.set(2)
        bill_app.food_oil.set(3)
        bill_app.wheat.set(4)
        bill_app.daal.set(5)
        bill_app.flour.set(6)
        bill_app.maggi.set(7)
        bill_app.total()
        assert bill_app.total_grocery_price == 2*10 + 3*10 + 4*10 + 5*6 + 6*8 + 7*5

    @pytest.mark.regression
    def test_total_cold_drinks_price_calculation(self):
        bill_app = Bill_App()
        bill_app.sprite.set(2)
        bill_app.limka.set(3)
        bill_app.mazza.set(4)
        bill_app.coke.set(5)
        bill_app.fanta.set(6)
        bill_app.mountain_duo.set(7)
        bill_app.total()
        assert bill_app.total_cold_drinks_price == 2*10 + 3*10 + 4*10 + 5*10 + 6*10 + 7*10

    @pytest.mark.regression
    def test_total_bill_calculation(self):
        bill_app = Bill_App()
        bill_app.sanitizer.set(2)
        bill_app.mask.set(3)
        bill_app.hand_gloves.set(4)
        bill_app.dettol.set(5)
        bill_app.newsprin.set(6)
        bill_app.thermal_gun.set(7)
        bill_app.rice.set(2)
        bill_app.food_oil.set(3)
        bill_app.wheat.set(4)
        bill_app.daal.set(5)
        bill_app.flour.set(6)
        bill_app.maggi.set(7)
        bill_app.sprite.set(2)
        bill_app.limka.set(3)
        bill_app.mazza.set(4)
        bill_app.coke.set(5)
        bill_app.fanta.set(6)
        bill_app.mountain_duo.set(7)
        bill_app.total()
        total_medical_price = 2*2 + 3*5 + 4*12 + 5*30 + 6*5 + 7*15
        total_grocery_price = 2*10 + 3*10 + 4*10 + 5*6 + 6*8 + 7*5
        total_cold_drinks_price = 2*10 + 3*10 + 4*10 + 5*10 + 6*10 + 7*10
        total_bill = total_medical_price + total_grocery_price + total_cold_drinks_price + round((total_medical_price*0.05), 2) + round((total_grocery_price*0.05), 2) + round((total_cold_drinks_price*0.1), 2)
        assert bill_app.total_bill == total_bill

    @pytest.mark.regression
    def test_tax_calculation(self):
        bill_app = Bill_App()
        bill_app.sanitizer.set(2)
        bill_app.mask.set(3)
        bill_app.hand_gloves.set(4)
        bill_app.dettol.set(5)
        bill_app.newsprin.set(6)
        bill_app.thermal_gun.set(7)
        bill_app.rice.set(2)
        bill_app.food_oil.set(3)
        bill_app.wheat.set(4)
        bill_app.daal.set(5)
        bill_app.flour.set(6)
        bill_app.maggi.set(7)
        bill_app.sprite.set(2)
        bill_app.limka.set(3)
        bill_app.mazza.set(4)
        bill_app.coke.set(5)
        bill_app.fanta.set(6)
        bill_app.mountain_duo.set(7)
        bill_app.total()
        total_medical_price = 2*2 + 3*5 + 4*12 + 5*30 + 6*5 + 7*15
        total_grocery_price = 2*10 + 3*10 + 4*10 + 5*6 + 6*8 + 7*5
        total_cold_drinks_price = 2*10 + 3*10 + 4*10 + 5*10 + 6*10 + 7*10
        assert bill_app.c_tax == round((total_medical_price*0.05), 2)
        assert bill_app.g_tax == round((total_grocery_price*0.05), 2)
        assert bill_app.c_d_tax == round((total_cold_drinks_price*0.1), 2)

    @pytest.mark.regression
    def test_zero_quantity_input(self):
        bill_app = Bill_App()
        bill_app.sanitizer.set(0)
        bill_app.mask.set(0)
        bill_app.hand_gloves.set(0)
        bill_app.dettol.set(0)
        bill_app.newsprin.set(0)
        bill_app.thermal_gun.set(0)
        bill_app.rice.set(0)
        bill_app.food_oil.set(0)
        bill_app.wheat.set(0)
        bill_app.daal.set(0)
        bill_app.flour.set(0)
        bill_app.maggi.set(0)
        bill_app.sprite.set(0)
        bill_app.limka.set(0)
        bill_app.mazza.set(0)
        bill_app.coke.set(0)
        bill_app.fanta.set(0)
        bill_app.mountain_duo.set(0)
        bill_app.total()
        assert bill_app.total_medical_price == 0
        assert bill_app.total_grocery_price == 0
        assert bill_app.total_cold_drinks_price == 0
        assert bill_app.total_bill == 0
