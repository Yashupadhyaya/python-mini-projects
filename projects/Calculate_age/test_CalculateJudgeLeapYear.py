# ********RoostGPT********
"""
Test generated by RoostGPT for test python-code-testing using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=judge_leap_year_f401fe1df5
ROOST_METHOD_SIG_HASH=judge_leap_year_4548bc7362


Scenario 1: Testing a leap year
Details:
  TestName: test_judge_leap_year_with_leap_year
  Description: This test is intended to verify that the judge_leap_year function correctly identifies a leap year.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the judge_leap_year function with a known leap year as the parameter.
  Assert: Check that the function returns True.
Validation:
  Rationalize: This test is important to ensure that the function correctly identifies leap years. The expected result aligns with the function's specifications and business requirements as the function is expected to return True for leap years.

Scenario 2: Testing a non-leap year
Details:
  TestName: test_judge_leap_year_with_non_leap_year
  Description: This test is intended to verify that the judge_leap_year function correctly identifies a non-leap year.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the judge_leap_year function with a known non-leap year as the parameter.
  Assert: Check that the function returns False.
Validation:
  Rationalize: This test is important to ensure that the function correctly identifies non-leap years. The expected result aligns with the function's specifications and business requirements as the function is expected to return False for non-leap years.

Scenario 3: Testing a year at the edge of a century (non-leap year)
Details:
  TestName: test_judge_leap_year_with_edge_of_century
  Description: This test is intended to verify that the judge_leap_year function correctly identifies a year at the edge of a century, which is not a leap year.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the judge_leap_year function with a known year at the edge of a century as the parameter.
  Assert: Check that the function returns False.
Validation:
  Rationalize: This test is important to ensure that the function correctly identifies years at the edge of a century, which are not leap years. The expected result aligns with the function's specifications and business requirements as the function is expected to return False for such years.

Scenario 4: Testing a year at the edge of a century (leap year)
Details:
  TestName: test_judge_leap_year_with_edge_of_century_leap_year
  Description: This test is intended to verify that the judge_leap_year function correctly identifies a year at the edge of a century, which is a leap year.
Execution:
  Arrange: No setup is required for this test.
  Act: Invoke the judge_leap_year function with a known year at the edge of a century that is a leap year as the parameter.
  Assert: Check that the function returns True.
Validation:
  Rationalize: This test is important to ensure that the function correctly identifies years at the edge of a century, which are leap years. The expected result aligns with the function's specifications and business requirements as the function is expected to return True for such years.
"""

# ********RoostGPT********
import pytest
from calendar import isleap
from Calculate_age.calculate import judge_leap_year

class Test_CalculateJudgeLeapYear:
    @pytest.mark.regression
    def test_judge_leap_year_with_leap_year(self):
        assert judge_leap_year(2000) == True, "Failed: Expected leap year"

    @pytest.mark.regression
    def test_judge_leap_year_with_non_leap_year(self):
        assert judge_leap_year(2001) == False, "Failed: Expected non-leap year"

    @pytest.mark.regression
    def test_judge_leap_year_with_edge_of_century(self):
        assert judge_leap_year(1900) == False, "Failed: Expected non-leap year at the edge of a century"

    @pytest.mark.regression
    def test_judge_leap_year_with_edge_of_century_leap_year(self):
        assert judge_leap_year(2000) == True, "Failed: Expected leap year at the edge of a century"
